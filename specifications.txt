Requirements
●  	User Interface Requirements:
○  	Run the app on a dev server locally for testing/grading
○  	You should be able to visit a URL and interact with the application
■  	App recognizes current account
■  	Sign transactions using MetaMask or uPort
■  	Contract state is updated
■  	Update reflected in UI
 
●  	Test Requirements:
○  	Write 5 tests for each contract you wrote
■  	Solidity or JavaScript
○  	Explain why you wrote those tests
○  	Tests run with truffle test
 
●  	Design Pattern Requirements:
○  	Implement a circuit breaker (emergency stop) pattern
○  	What other design patterns have you used / not used?
■  	Why did you choose the patterns that you did?
■  	Why not others?
 
●  	Security Tools / Common Attacks:
○  	Explain what measures you’ve taken to ensure that your contracts are not susceptible to common attacks
 
●  	Use a library or extend a contract
○  	Via EthPM or write your own
  
Deploy your smart contract(s) onto one of the test networks. Include a document called deployed_addresses.txt that describes where your contracts live (which testnet and address).
Students can optionally verify their source code using etherscan for the appropriate testnet https://etherscan.io/verifyContract 
Evaluators can check the appropriate testnet etherscan at the provided addresses to verify deployment

●  	Stretch requirements (for bonus points, not required):

Implement an upgradable design pattern
Write a smart contract in LLL or Vyper

○  	Integrate with an additional service, maybe even one we did not cover in this class

For example:
■      IPFS
Users can dynamically upload documents to IPFS that are referenced via their smart contract
■      uPort
■      Ethereum Name Service
A name registered on the ENS resolves to the contract, verifiable on rinkeby.etherscan.io/contract_name
■      Oracle